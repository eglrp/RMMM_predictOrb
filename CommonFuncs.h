/****************************************************************************
目的：    定义数组和矩阵运算的通用函数库

编写时间：2008.11.22
版本:     V1.1
版权：    武汉大学
****************************************************************************/
#pragma once 
#ifndef _COMMON_FUNCTION_H_
#define _COMMON_FUNCTION_H_

#include <stdio.h>
/****************************************************************************
  Rotation_x
  
  目的：  计算绕X轴的旋转矩阵

  参数:
  Angle   旋转角[rad]
  Mat     3*3阶旋转矩阵 
****************************************************************************/

void Rotation_x( double Angle, double Mat[] );

/****************************************************************************
  Rotation_y
  
  目的：  计算绕X轴的旋转矩阵

  参数:
  Angle   旋转角[rad]
  Mat     3*3阶旋转矩阵 
****************************************************************************/

void Rotation_y( double Angle, double Mat[] );

/****************************************************************************
  Rotation_z
  
  目的：  计算绕X轴的旋转矩阵

  参数:
  Angle   旋转角[rad]
  Mat     3*3阶旋转矩阵 
****************************************************************************/

void Rotation_z( double Angle, double Mat[] );

/****************************************************************************
  MatrixMultiply
  
  目的：  矩阵相乘 M3 = M1*M2

  参数:
  m1      M1的行数
  n1      M1的列数
  m2      M2的行数
  n2      M2的列数

****************************************************************************/

void MatrixMultiply( int m1, int n1, int m2, int n2, 
                    const double M1[], const double M2[], double M3[] );

/****************************************************************************
  MatrixMultiply3
  
  目的：  矩阵相乘 M3 = M1*P*M2

  参数:
  m1      M1的行数
  n1      M1的列数
  m2      M2矩阵的行数[m2=n1]
  n2      M2矩阵的列数
  M1      输入矩阵[m1*n1]
  P       对角阵,用一维向量表示[m1]
  M2      输入矩阵[m2*n2]

  输出参数 

  M2    输出矩阵[n*n]

****************************************************************************/

void MatrixMultiply3( int m1, int n1, int m2, int n2, 
                    const double M1[], const double P[], const double M2[], double M3[] );

void MatrixMultiplyk(int m,int n,double M[],double k);
/****************************************************************************
MatrixMultiply2
功能：	矩阵和对角阵乘法
参数:
flag	表示相乘的顺序
flag=0:   M2 = M1*P
flag=1:    M2=P*M1
P       对角阵,用一维向量表示[m1]
m1      M1的行数
n1      M1的列数
length      M2矩阵的行列数[length=n1或length=m1]
M1      输入矩阵[m1*n1]

输出参数 

M2    输出矩阵[m1*n1]

****************************************************************************/
void MatrixMultiply2( int flag,int m1, int n1, int length, 
	const double M1[], const double P[],double M2[] );
void ArraySub(int m,
	const double A1[], const double A2[], double A3[] );
/****************************************************************************
ArrayAddition

目的：   向量相加 A3 = A1+A2

参数:
m      向量的的维数
A1      
A2
A3

****************************************************************************/
void ArrayAddition(int m,
	const double A1[], const double A2[], double A3[] );
/****************************************************************************
  MatrixAddition
  
  目的：  矩阵相加 M3 = M1+M2

  参数:
  m      M1的行数
  n      M1的列数

****************************************************************************/

void MatrixAddition( int m, int n,
                    const double M1[], const double M2[], double M3[] );


/****************************************************************************
  MatrixAddition2
  
  目的：  矩阵相加 M2 = M1+M2

  参数:
  m      M1的行数
  n      M1的列数

****************************************************************************/

void MatrixAddition2( int m, int n,
                    const double M1[], double M2[] );


/****************************************************************************
MatrixAddition3

目的: 对角矩阵+方阵
参数: int n 方阵行列数
参数: const double M1[] 对角矩阵
参数: double M2[] 方阵
****************************************************************************/
void MatrixAddition3(int n, const double M1[], double M2[]);
/****************************************************************************
  MatrixSubstract
  
  目的：  矩阵相减 M3 = M1-M2

  参数:
  m      M1的行数
  n      M1的列数

****************************************************************************/

void MatrixSubstract( int m, int n,
                     const double M1[], const double M2[], double M3[] );

/****************************************************************************
  MatrixTranspose
  
  目的：  矩阵转置 

  参数:
  m      M1的行数
  n      M1的列数
  M1     输入矩阵
  MT     输出矩阵  MT = = M1(T)
****************************************************************************/

void MatrixTranspose( int m, int n, const double M1[], double MT[] );

/****************************************************************************
  VectDot    a = A . B
  
  目的：  计算两个向量的点积

  参数:
  m      A向量的元素个数
  n      B向量的元素个数, 要求m=n

  返回值  点积
****************************************************************************/

double VectDot( int m, int n, const double A[], const double B[] );

/****************************************************************************
  CrossDot    C = A X B
  
  目的：  计算两个向量的叉积

  参数:
  m      A向量的元素个数
  n      B向量的元素个数, 要求m=n

  
****************************************************************************/
void CrossDot( int m, int n, const double A[], const double B[], double C[] );


/****************************************************************************
  Dyadic    a = A . B
  
  目的：  计算两个向量的Dyadic积

  参数:
  m      A向量的元素个数
  n      B向量的元素个数

  输出参数:
  Mat    Dyadic积矩阵[m*n]

  返回值  点积
****************************************************************************/

void Dyadic( int m, int n, const double A[], const double B[], double Mat[] );


/****************************************************************************
  SatElev
  
  目的：  计算卫星高度角, 如果接收机位置没有初始化, 返回Pai/2.0

  参数:

  SatPos[3]  卫星位置[m]
  RCVPos[3]  接收机位置[m]

  返回值

  卫星高度角[Rad]

****************************************************************************/

double SatElev( const double SatPos[], const double RCVPos[] );

/****************************************************************************
  MatrixInv
  
  目的：  矩阵求逆  

  参数:
  n      M1的行数和列数
  a      输入矩阵
  b      输出矩阵   b=inv(a)

****************************************************************************/

void MatrixInv(int n,double *a,double *b);

/****************************************************************************
  mbbub
  
  目的：  实数冒泡排序  

  参数:
  n      待排序序列的长度
  p      实数数组

****************************************************************************/
void mbbub( int n, double p[] );


/****************************************************************************
  CopyArray
  
  目的：  将一个数组拷贝到另一个数组中( 多维数组均以一维表示 )  

  参数:
  n      拷贝的数组元素个数
  Dist   目标数组
  Sour   源数组

****************************************************************************/
void CopyArray( int n, double Dist[], const double Sour[] );

/****************************************************************************
CopyMatrix

目的: 从Sour矩阵扣出子矩阵复制到Dist矩阵中
参数: int mLengh1   Dist矩阵行数
参数: int nLengh1   Dist矩阵列数
参数: int mstart1   Dist子矩阵起始行数
参数: int nstart1   Dist子矩阵起始列数
参数: double Dist[] 目的矩阵
参数: int mLengh2   Sour矩阵行数
参数: int nLengh2   Sour矩阵列数
参数: int mstart2   Sour子矩阵起始行数
参数: int nstart2   Sour子矩阵起始列数
参数: const double Sour[]
****************************************************************************/
void CopyMatrix(int mLengh1,int nLengh1,double Dist[], int mLengh2,int nLengh2,int mstart2,int nstart2,const double Sour[]);
/****************************************************************************
  MatrixPrintf
  
  目的：  将矩阵显示到屏幕上  

  参数:
  m, n   矩阵的行数和列数
  Mat    待显示的矩阵

****************************************************************************/
void MatrixPrintf( int m, int n, double Mat[] );


/****************************************************************************
  MatrixFprintf
  
  目的：  将矩阵显示到文件中  

  参数:
  m, n   矩阵的行数和列数
  Mat    待显示的矩阵

****************************************************************************/
void MatrixFprintf( int m, int n, FILE* Fout, double Mat[] );
double randNum(double limitMin,double limitMax);
double getModFirst(int length,double x[]);
void randSed();
#endif
